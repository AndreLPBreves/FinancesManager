// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using backend.Data;

#nullable disable

namespace backend.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250912180046_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("backend.Models.EmailConfirmation", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<DateTime>("Expiration")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expiration");

                    b.Property<Guid>("Key")
                        .HasColumnType("uuid")
                        .HasColumnName("key");

                    b.Property<bool>("Used")
                        .HasColumnType("boolean")
                        .HasColumnName("used");

                    b.HasKey("UserId")
                        .HasName("pk_email_confirmations");

                    b.HasIndex("Key")
                        .IsUnique()
                        .HasDatabaseName("ix_email_confirmations_key");

                    b.ToTable("email_confirmations", (string)null);
                });

            modelBuilder.Entity("backend.Models.Ledger", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid")
                        .HasColumnName("owner_id");

                    b.HasKey("Id")
                        .HasName("pk_ledgers");

                    b.HasIndex("OwnerId", "Name")
                        .IsUnique()
                        .HasDatabaseName("ix_ledgers_owner_id_name");

                    b.ToTable("ledgers", (string)null);
                });

            modelBuilder.Entity("backend.Models.LedgerAccessLevel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("description");

                    b.HasKey("Id")
                        .HasName("pk_ledger_access_levels");

                    b.HasIndex("Description")
                        .IsUnique()
                        .HasDatabaseName("ix_ledger_access_levels_description");

                    b.ToTable("ledger_access_levels", (string)null);
                });

            modelBuilder.Entity("backend.Models.LedgerAllowedUser", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<Guid>("LedgerId")
                        .HasColumnType("uuid")
                        .HasColumnName("ledger_id");

                    b.Property<Guid>("AccessLevelId")
                        .HasColumnType("uuid")
                        .HasColumnName("access_level_id");

                    b.Property<DateTime?>("Expiration")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expiration");

                    b.HasKey("UserId", "LedgerId")
                        .HasName("pk_ledger_allowed_users");

                    b.HasIndex("AccessLevelId")
                        .HasDatabaseName("ix_ledger_allowed_users_access_level_id");

                    b.HasIndex("LedgerId")
                        .HasDatabaseName("ix_ledger_allowed_users_ledger_id");

                    b.ToTable("ledger_allowed_users", (string)null);
                });

            modelBuilder.Entity("backend.Models.Session", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("Creation")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("creation");

                    b.Property<DateOnly?>("Exclusion")
                        .HasColumnType("date")
                        .HasColumnName("exclusion");

                    b.Property<DateTime>("Expiration")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expiration");

                    b.Property<string>("Jwt")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("jwt");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_sessions");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_sessions_user_id");

                    b.ToTable("sessions", (string)null);
                });

            modelBuilder.Entity("backend.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)")
                        .HasColumnName("first_name");

                    b.Property<bool>("IsConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("is_confirmed");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)")
                        .HasColumnName("last_name");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(88)
                        .HasColumnType("character varying(88)")
                        .HasColumnName("password_hash");

                    b.Property<string>("PasswordSalt")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("password_salt");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("ix_users_email");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("backend.Models.EmailConfirmation", b =>
                {
                    b.HasOne("backend.Models.User", "User")
                        .WithOne()
                        .HasForeignKey("backend.Models.EmailConfirmation", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_email_confirmations_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("backend.Models.Ledger", b =>
                {
                    b.HasOne("backend.Models.User", "Owner")
                        .WithMany("Ledgers")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_ledgers_users_owner_id");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("backend.Models.LedgerAllowedUser", b =>
                {
                    b.HasOne("backend.Models.LedgerAccessLevel", "AccessLevel")
                        .WithMany("AllowedUsers")
                        .HasForeignKey("AccessLevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_ledger_allowed_users_ledger_access_levels_access_level_id");

                    b.HasOne("backend.Models.Ledger", "Ledger")
                        .WithMany("AllowedUsers")
                        .HasForeignKey("LedgerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_ledger_allowed_users_ledgers_ledger_id");

                    b.HasOne("backend.Models.User", "User")
                        .WithMany("AccessibleLedgers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_ledger_allowed_users_users_user_id");

                    b.Navigation("AccessLevel");

                    b.Navigation("Ledger");

                    b.Navigation("User");
                });

            modelBuilder.Entity("backend.Models.Session", b =>
                {
                    b.HasOne("backend.Models.User", "User")
                        .WithMany("Sessions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_sessions_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("backend.Models.Ledger", b =>
                {
                    b.Navigation("AllowedUsers");
                });

            modelBuilder.Entity("backend.Models.LedgerAccessLevel", b =>
                {
                    b.Navigation("AllowedUsers");
                });

            modelBuilder.Entity("backend.Models.User", b =>
                {
                    b.Navigation("AccessibleLedgers");

                    b.Navigation("Ledgers");

                    b.Navigation("Sessions");
                });
#pragma warning restore 612, 618
        }
    }
}
